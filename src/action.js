tee src/action.js > /dev/null <<'JS'
import fs from "fs";
import yaml from "js-yaml";
import { Octokit } from "@octokit/rest";
import { generateFromDiff } from "./lib/generator.js";

const token = process.env.GITHUB_TOKEN;
const [owner, repo] = process.env.REPO_FULL.split("/");
const pr = Number(process.env.PR_NUMBER);
const octo = new Octokit({ auth: token });

/** Load .pr-describer.yml or fall back to sane defaults */
function loadConfig() {
  try {
    const raw = fs.readFileSync(".pr-describer.yml", "utf8");
    const cfg = yaml.load(raw) || {};
    // defaults
    return {
      style: cfg.style || "conventional-commit",
      summary_length: Number(cfg.summary_length ?? 100),
      min_changed_lines: Number(cfg.min_changed_lines ?? 5),
      post_mode: (cfg.post_mode || "comment").toLowerCase(), // comment | overwrite
      labels: {
        skip: Array.isArray(cfg.labels?.skip) ? cfg.labels.skip : ["no-ai", "draft"],
        force: Array.isArray(cfg.labels?.force) ? cfg.labels.force : ["ai-describe"],
      },
    };
  } catch {
    return {
      style: "conventional-commit",
      summary_length: 100,
      min_changed_lines: 5,
      post_mode: "comment",
      labels: { skip: ["no-ai", "draft"], force: ["ai-describe"] },
    };
  }
}

const config = loadConfig();

// 1) Get changed files (and compute size)
const files = await octo.pulls.listFiles({ owner, repo, pull_number: pr, per_page: 100 });

let diff = "";
let added = 0, removed = 0;
for (const f of files.data) {
  if (f.patch) diff += `\n# ${f.filename}\n${f.patch}\n`;
  added += f.additions || 0;
  removed += f.deletions || 0;
}
const totalChanged = added + removed;

// 2) Label-based gating
const prInfo = await octo.pulls.get({ owner, repo, pull_number: pr });
const labels = prInfo.data.labels.map(l => l.name);

// If any "force" label exists, we run; otherwise, we may skip
const hasForce = labels.some(l => config.labels.force.includes(l));
const hasSkip = labels.some(l => config.labels.skip.includes(l));

// 3) Small PR guard (unless forced)
if (!hasForce && totalChanged < config.min_changed_lines) {
  console.log(`Skipped: only ${totalChanged} changed lines (< ${config.min_changed_lines}).`);
  process.exit(0);
}

// 4) Skip by label (unless forced)
if (!hasForce && hasSkip) {
  console.log(`Skipped: PR has a skip label (${labels.join(", ")}).`);
  process.exit(0);
}

// 5) Call generator (we pass style/summary_length as hints)
const suggestion = await generateFromDiff({
  diff: diff.slice(0, 12000),
  repo: `${owner}/${repo}`,
  author: "bot",
  style: config.style,
  summaryLength: config.summary_length
});

// 6) Post result: comment or overwrite PR body (opt-in by config)
if (config.post_mode === "overwrite") {
  await octo.pulls.update({ owner, repo, pull_number: pr, body: suggestion });
  console.log("PR body updated.");
} else {
  await octo.issues.createComment({
    owner, repo, issue_number: pr,
    body: [
      "### ðŸ¤– Suggested PR Title & Description",
      "",
      "```",
      suggestion,
      "```",
      `_Generated by pr-copilot-extension â€¢ style=${config.style} â€¢ min_lines=${config.min_changed_lines}_`
    ].join("\n")
  });
  console.log("Comment posted.");
}
JS
