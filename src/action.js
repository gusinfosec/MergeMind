import { Octokit } from "@octokit/rest";
import { generateFromDiff } from "./lib/generator.js";

const token = process.env.GITHUB_TOKEN;
const [owner, repo] = process.env.REPO_FULL.split("/");
const pr = Number(process.env.PR_NUMBER);
const octo = new Octokit({ auth: token });

// fetch changed files
const files = await octo.pulls.listFiles({ owner, repo, pull_number: pr, per_page: 100 });

let diff = "", added = 0, removed = 0;
for (const f of files.data) {
  if (f.patch) diff += `\n# ${f.filename}\n${f.patch}\n`;
  added += f.additions || 0;
  removed += f.deletions || 0;
}

// basic guard: skip tiny PRs
const minChangedLines = Number(process.env.MIN_CHANGED_LINES || 5);
if (added + removed < minChangedLines) {
  console.log(`Skipped: only ${added + removed} changed lines (< ${minChangedLines}).`);
  process.exit(0);
}

const suggestion = await generateFromDiff({
  diff: diff.slice(0, 12000),
  repo: `${owner}/${repo}`,
  author: "bot"
});

// fetch PR labels
const prInfo = await octo.pulls.get({ owner, repo, pull_number: pr });
const labels = prInfo.data.labels.map(l => l.name);

// if label present, edit body; else comment
if (labels.includes("ai-autofill")) {
  await octo.pulls.update({ owner, repo, pull_number: pr, body: suggestion });
  console.log("PR body updated.");
} else {
  await octo.issues.createComment({
    owner, repo, issue_number: pr,
    body: [
      "### ðŸ¤– Suggested PR Title & Description",
      "",
      "```",
      suggestion,
      "```",
      "_Generated by pr-copilot-extension_"
    ].join("\n")
  });
  console.log("Comment posted.");
}
